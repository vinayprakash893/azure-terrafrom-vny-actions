name: Pr-check-comment

on: 
  issue_comment:

jobs:
  pr_commented:
    # This job only runs for pull request comments
    name: PR comment
    if: ${{ github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get install jq -y

      - run: |
          echo A comment on PR $NUMBER
        env:
          NUMBER: ${{ github.event.issue.number }}

      - name : Print Title of PR
        env:
          TITLE: ${{ github.event.issue.title }}
        run: echo The Title of your PR is $TITLE
      
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      
      # - name: Get Branch name
      #   id: branchName
      #   run: |
      #     echo ::set-output name=branch::$(echo $PR_COMMENT | cut -d "[" -f2 | cut -d "]" -f1)
      #   env:
      #     PR_COMMENT: ${{ github.event.comment.body }}

      - name: Get comment
        run: |
          echo A comment on PR $PR_COMMENT
        env:
          PR_COMMENT: ${{ github.event.comment.body }}
        
      # - name: print to env
      #   id: setting-comment-env
      #   run: |
      #     PR_COMMENT="${{ github.event.comment.body }}"
      #     echo "PR_COMMENT=$PR_COMMENT" >> $GITHUB_ENV

      - name: all variables
        run:  env

      #echo "PR_COMMENT=$(echo "$PR_COMMENT" | tr -d '\n')" >> $GITHUB_ENV
      # - name: comment with output to jq
      #   run: |
      #     PR_COMMENT="${{ github.event.comment.body }}"
      #     echo "PR_COMMENT=$PR_COMMENT" >> $GITHUB_ENV
      #     echo "-------------------------"
          
      #     # Construct JSON payload using jq
      #     payload='{"issues":["'"${{ github.event.inputs.jira_number }}"'"], "data": {"releaseVersion":$PR_COMMENT}}'

      #     # Send payload using curl and jq
      #     echo "$payload" | jq '.' > payload.json
      #     curl -X POST https://automation.atlassian.com/pro/hooks/7e0c8982c6766ee66128b036964ae062592d1a69 \
      #     -H 'Content-type: application/json' \
      #     --data-binary "@payload.json"


      - name: comment with slash
        run: |
          # PR_COMMENT="${{ github.event.comment.body }}"
          # echo "PR_COMMENT=$PR_COMMENT" >> $GITHUB_ENV
          echo "-------------------------"
          
          # Construct JSON payload using string interpolation
          payload="{\"issues\":[\"${{ github.event.issue.title }}\"], \"data\": {\"releaseVersion\":\"${{ github.event.comment.body }}\"}}"

          # Send payload using curl
          echo "$payload" > payload.json
          curl -X POST https://automation.atlassian.com/pro/hooks/7e0c8982c6766ee66128b036964ae062592d1a69 \
          -H 'Content-type: text/html; charset=utf8' \
          --data-binary "@payload.json"

      # - name: comment with environemntal variable
      #   run: |
      #     PR_COMMENT="${{ github.event.comment.body }}"
      #     echo "PR_COMMENT=$PR_COMMENT" >> $GITHUB_ENV
      #     echo "-------------------------"
          
      #     # Escape special characters and construct JSON payload
      #     payload="{\"issues\":[\"${{ github.event.issue.title  }}\"], \"data\": {\"releaseVersion\":\"$PR_COMMENT\"}}"

      #     # Send payload using curl
      #     echo "$payload" > payload.json
      #     cat payload.json
      #     curl -X POST https://automation.atlassian.com/pro/hooks/7e0c8982c6766ee66128b036964ae062592d1a69 \
      #     -H 'Content-type: application/json' \
      #     --data-binary "@payload.json"


      # - name: comment without jq
      #   run: |
      #     PR_COMMENT="${{ github.event.comment.body }}"
      #     echo "PR_COMMENT=$PR_COMMENT" >> $GITHUB_ENV
      #     echo "-------------------------"
      #     curl -X POST https://automation.atlassian.com/pro/hooks/7e0c8982c6766ee66128b036964ae062592d1a69 \
      #     -H 'Content-type: application/json' \
      #     --data '{"issues":["${{ github.event.issue.title }}"], "data": {"releaseVersion":"$PR_COMMENT"}}'

      # - name: comment without jq with slash 
      #   run: |
      #     PR_COMMENT="${{ github.event.comment.body }}"
      #     echo "PR_COMMENT=$PR_COMMENT" >> $GITHUB_ENV
      #     echo "-------------------------"
      #     curl -X POST https://automation.atlassian.com/pro/hooks/7e0c8982c6766ee66128b036964ae062592d1a69 \
      #     -H 'Content-type: application/json' \
      #     --data "{\"issues\":[\"${{ github.event.issue.title }}\"], \"data\": {\"releaseVersion\":\"$PR_COMMENT\"}}"

      # - name: print commit number
      #   run: |
      #     echo "$PR_COMMENT"

      # - name: comment without jq with slash with single and double quotes
      #   run: |
      #     PR_COMMENT="${{ github.event.comment.body }}"
      #     echo "PR_COMMENT=$PR_COMMENT" >> $GITHUB_ENV
      #     echo "-------------------------"
      #     curl -X POST https://automation.atlassian.com/pro/hooks/7e0c8982c6766ee66128b036964ae062592d1a69 \
      #     -H 'Content-type: application/json' \
      #     --data "{\"issues\":[\"${{ github.event.issue.title }}\"], \"data\": {\"releaseVersion\": "'${{ github.event.comment.body }}'"}}"

# -----------------------------------------------------------------------------------------------------------

      # - name: make comment with comment body
      #   uses: dkershner6/post-api-call-action@v1
      #   with:
      #     url: https://automation.atlassian.com/pro/hooks/7e0c8982c6766ee66128b036964ae062592d1a69
      #     data: '{"issues":["${{ github.event.issue.title }}"], "data": {"releaseVersion":"${{ github.event.comment.body }}"}}'
      #     #headers: "{\"Authorization\": \"Bearer ${{ secrets.API_KEY }}\"}"
      #     params: "{\"content\": \"Test Content\"}"

      # - name: make comment with env variable
      #   uses: dkershner6/post-api-call-action@v1
      #   with:
      #     url: https://automation.atlassian.com/pro/hooks/7e0c8982c6766ee66128b036964ae062592d1a69
      #     data: '{"issues":["${{ github.event.issue.title }}"], "data": {"releaseVersion": "${{env.PR_COMMENT}}" }}'
      #     #headers: "{\"Authorization\": \"Bearer ${{ secrets.API_KEY }}\"}"
      #     params: "{\"content\": \"Test Content\"}"

  # issue_commented:
  #   # This job only runs for issue comments
  #   name: Issue comment
  #   if: ${{ !github.event.issue.pull_request }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: |
  #         echo A comment on issue $NUMBER
  #       env:
  #         NUMBER: ${{ github.event.issue.number }}

# name: Pr-check-pull

# on:
#   pull_request:
#     types: [opened, synchronize]

# jobs:
#   print_title_of_pr:
#     runs-on: ubuntu-20.04
#     steps:
#     - name : Print Title of PR
#       env:
#           TITLE: ${{ github.event.pull_request.title }}
#       run: echo The Title of your PR is $TITLE
  
#   approved:
#     if: github.event.review.state == 'approved'
#     runs-on: ubuntu-latest
#     steps:
#       - run: echo "This PR was approved"

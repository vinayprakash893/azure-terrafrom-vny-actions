name: terraform-cloud-direct

#on: push
on:
  push:
  workflow_dispatch:
    inputs:
      flutter_version:
        description: 'Framework version'
        required: true
        default: '2.5.3'

jobs:
  job1:
    name: Validate
    # if: github.event_name == 'pull_request' || github.event.ref == 'refs/heads/main'
    env:
      ARTIFACT_NAME: "arti-11"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: true
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"
      
      - name: all variables
        run:  env  

      - name: Setup path
        shell: bash
        run: |
          ls -la
          pwd
        working-directory: 'python-tf-cloud-api'
          
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Setup terrafromrc
        id: initialization
        shell: bash
        run: |
          echo 'credentials "app.terraform.io" { token = "${{ secrets.TF_API_TOKEN }}" }' > .terraformrc
          cat .terraformrc
          TF_CLI_CONFIG_FILE=.terraformrc  
          echo "TF_CLI_CONFIG_FILE=$TF_CLI_CONFIG_FILE" >> $GITHUB_ENV
        working-directory: 'python-tf-cloud-api'

      - name: Initialize Terraform
        id: init
        shell: bash
        run: terraform init 
        working-directory: 'python-tf-cloud-api'
        # env:
        #   TF_CLI_CONFIG_FILE: .terraformrc

      - name: list path
        shell: bash
        run: |
          ls -la
          pwd
          cat .terraformrc
        working-directory: 'python-tf-cloud-api'
      
      - name: Initialize Terraform2
        id: init2
        shell: bash
        run: terraform init 
        working-directory: 'python-tf-cloud-api'
      
      - name: state list
        id: state
        shell: bash
        run: |
          pwd
          ls -la
          terraform state list 
        working-directory: 'python-tf-cloud-api'
      
      - name: Plan Terraform deployment
        id: terraform-plan
        run: |
          if [[ ${{ github.event_name }} == 'workflow_dispatch' && ${{ github.event.inputs.destroy || 'false' }} == 'true' && ${{ inputs.terraform-cloud }} == 'false']]; then
            echo "Executing terraform plan --destroy " 
            terraform plan --destroy -detailed-exitcode -input=false -out=tfplan
          elif [[ ${{ github.event_name }} == 'workflow_dispatch' && ${{ github.event.inputs.destroy || 'false' }} == 'true' && ${{ inputs.terraform-cloud }} == 'true' ]]; then
            echo "Executing terraform plan --destroy " 
            terraform plan --destroy -detailed-exitcode -input=false
          elif [[ ${{ github.event_name }} == 'workflow_dispatch' && ${{ github.event.inputs.destroy || 'false' }} == 'false' && ${{ inputs.terraform-cloud }} == 'true' ]]; then
            echo "Executing terraform plan --destroy " 
            terraform plan -detailed-exitcode -input=false
          else 
            echo "Executing terraform plan" 
            terraform plan -detailed-exitcode -input=false -no-color -out=tfplan
          fi 
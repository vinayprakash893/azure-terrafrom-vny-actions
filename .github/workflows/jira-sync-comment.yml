name: self-service-jira-sync

on:  
  issue_comment: 

jobs: 
  pr_commented: 
    # This job only runs for pull request comments, otherwise it runs even for Github issues 
    name: PR comment 
    if: ${{ github.event.issue.pull_request && startsWith(github.event.issue.title,'ISM1')}} 

    runs-on: ubuntu-latest
    steps: 
      - name : PR Ticket Number
        id: ticket
        env: 
          TITLE: ${{ github.event.issue.title }} 
        run: |
            string=$TITLE 
            IFS=':' read -ra parts <<< "$string"
            echo "ticket=${parts[0]}" >> $GITHUB_OUTPUT
      
      - uses: actions/setup-python@v4 
        with: 
          python-version: '3.10'  
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Make API call 
        run: | 
          cat <<EOF > apijiracall.py
          import json
          import requests
          import sys

          def send_jira_comment(ticket, comment):
              data = {
                  "issues": [ticket],
                  "data": {"commentdata": comment}
              }
              headers = {
                  "Content-Type": "application/json"
              }

              response = requests.post("https://automation.atlassian.com/pro/hooks/7e0c8982c6766ee66128b036964ae062592d1a69", data=json.dumps(data), headers=headers)
              return response

          def main():
              ticket_received = sys.argv[1]
              comment_received = sys.argv[2]

              # Split the comment into chunks of 30000 characters
              chunk_size = 30000
              comment_chunks = [comment_received[i:i + chunk_size] for i in range(0, len(comment_received), chunk_size)]

              for index, chunk in enumerate(comment_chunks):
                  response = send_jira_comment(ticket_received, chunk)
                  print(f"Chunk {index + 1} sent. Response: {response.text}")

          if __name__ == "__main__":
              main()

          EOF
          python apijiracall.py '${{ steps.ticket.outputs.ticket }}' '${{ github.event.comment.body }}' 






      # - name: Make API call 
      #   run: | 
      #     cat <<EOF > apijiracall.py 
      #     import json 
      #     import requests 
      #     import sys 
      #     ticket_received = sys.argv[1] 
      #     comment_received = sys.argv[2] 
      #     data = { 
      #         "issues": [ticket_received],  
      #         "data": {"commentdata": comment_received} 
      #     } 
      #     headers = { 
      #         "Content-Type": "application/json" 
      #     } 
      #     print(data) 
      #     response = requests.post("https://automation.atlassian.com/pro/hooks/7e0c8982c6766ee66128b036964ae062592d1a69", data=json.dumps(data), headers=headers) 
      #     print(json.dumps(data)) 
      #     EOF
      #     python apijiracall.py '${{ steps.ticket.outputs.ticket }}' '${{ github.event.comment.body }}' 

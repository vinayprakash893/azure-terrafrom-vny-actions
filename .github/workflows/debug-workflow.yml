name: Debug-workflow

on: 
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

      - name: get the commit comment-message
        env:
            MESSGE: ${{ github.event.commits[0].message }}
        run: |
          echo Merge Message is: $MESSGE
          number=$(echo $MESSGE | grep -oP 'pull request #\K\d+')
          echo "$number"
          PR_Number=$number
          echo "PR_Number=$PR_Number" >> $GITHUB_ENV
      
      - name: print commit number
        run: |
          echo "$PR_Number"
        
      - name: Add comment
        uses: actions/github-script@v6
        #if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.REPO_SCOPED_TOKEN }}
          script: |
            const prNumber = $PR_Number;
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ‘‹ Thanks for reporting!!'
            })

      # - name: check if comment is there or not
      #   uses: actions/github-script@v4
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const prNumber = `${{ github.event.inputs.pull_request_number }}`;
      #       const comment = 'done';
            
      #       const { data: comments } = await github.issues.listComments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: prNumber,
      #       });
            
      #       const existingComment = comments.find(comment => comment.body.trim() === 'done');
            
      #       if (!existingComment) {
      #         await github.issues.createComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           issue_number: prNumber,
      #           body: comment,
      #         });
      #       }

